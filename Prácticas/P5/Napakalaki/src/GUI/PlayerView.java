/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import NapakalakiGame.Napakalaki;
import NapakalakiGame.Player;
import NapakalakiGame.Treasure;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 *
 * @author Mario Rodríguez
 */
public class PlayerView extends javax.swing.JPanel {
    
    Player playerModel ;
    CultistView cultistModel ;
    private Napakalaki napakalakiModel ;

    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();
    }
    
    public void setPlayer ( Player p ) 
    {
        this.playerModel = p ;       
        dead.setText( "Muerto:   " + Boolean.toString( playerModel.isDead() ) ) ;
        nivel.setText( "Nivel:   " + Integer.toString( playerModel.getLevels() ) ) ;
        nivelCombate.setText( "Nivel de combate:   " + Integer.toString( playerModel.getCombatL() ) ) ;
        nombre.setText( "Nombre:   " + playerModel.getName() ) ;          
        // A continuación se actualizan sus tesoros
        fillTreasurePanel (visibleTreasures, playerModel.getVisibleTreasures());
        fillTreasurePanel (hiddenTreasures, playerModel.getHiddenTreasures());
        this.cultistView1.setCultist(p);
        repaint();
        revalidate();   
    }
    
    public void setNapakalaki( Napakalaki n )
    {
        napakalakiModel = n ;
        repaint();
    }
    
    /* Rellena los JPanel de los tesoros ocultos o visibles con las listas de los tesoros que en 
    cada momento tenga el jugador actual */
    public void fillTreasurePanel (JPanel aPanel, ArrayList<Treasure> aList) {
        // Se elimina la información antigua
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
        // al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure (t);
            aTreasureView.setVisible (true);
            aPanel.add (aTreasureView);
        }
        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
    }
    
    // Obtener la lista de tesoros seleccionados.
    public ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        // Se recorren los tesoros que contiene el panel,
        // almacenando en un vector aquellos que están seleccionados.
        // Finalmente se devuelve dicho vector.
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        for (Component c : aPanel.getComponents()) {
            tv = (TreasureView) c;
            if ( tv.isSelected() )
            output.add ( tv.getTreasure() );
        }
        return output;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        nombre = new javax.swing.JLabel();
        nivel = new javax.swing.JLabel();
        nivelCombate = new javax.swing.JLabel();
        dead = new javax.swing.JLabel();
        visibleTreasures = new javax.swing.JPanel();
        hiddenTreasures = new javax.swing.JPanel();
        comprarNivel = new javax.swing.JButton();
        hacerVisible = new javax.swing.JButton();
        descartarT = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cultistView1 = new GUI.CultistView();
        jButton1 = new javax.swing.JButton();

        jButton2.setText("jButton2");

        nombre.setText("Nombre");

        nivel.setText("Nivel");

        nivelCombate.setText("NivelCombate");

        dead.setText("Muerto");

        visibleTreasures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        hiddenTreasures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        comprarNivel.setText("Comprar Niveles");
        comprarNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarNivelActionPerformed(evt);
            }
        });

        hacerVisible.setText("Hacer Visible");
        hacerVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hacerVisibleActionPerformed(evt);
            }
        });

        descartarT.setText("Descartar Tesoro");
        descartarT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descartarTActionPerformed(evt);
            }
        });

        jLabel1.setText("Tesoros Visibles");

        jLabel2.setText("Tesoros Ocultos");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Jugador");

        jButton1.setText("INTERCAMBIAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comprarNivel)
                .addGap(32, 32, 32)
                .addComponent(hacerVisible)
                .addGap(29, 29, 29)
                .addComponent(descartarT)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(visibleTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hiddenTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(nombre)
                            .addComponent(nivel)
                            .addComponent(dead)
                            .addComponent(nivelCombate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cultistView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nivel)
                        .addGap(9, 9, 9)
                        .addComponent(nivelCombate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dead, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cultistView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hacerVisible)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comprarNivel)
                        .addComponent(descartarT)))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visibleTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hiddenTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void hacerVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hacerVisibleActionPerformed
        // TODO add your handling code here:
        //Recopila información de la GUI.
        ArrayList<Treasure> selHidden = getSelectedTreasures (hiddenTreasures);
        // Envia mensajes al modelo para que se desarrolle la acción.
        napakalakiModel.makeTreasuresVisible (selHidden);
        // Actualizar la vista.
        setPlayer (napakalakiModel.getCurrentPlayer());
    }//GEN-LAST:event_hacerVisibleActionPerformed

    private void comprarNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarNivelActionPerformed
        // TODO add your handling code here:
        ArrayList<Treasure> selVisible = getSelectedTreasures(visibleTreasures);
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);
        
        this.napakalakiModel.buyLevels(selVisible, selHidden);
        setPlayer(napakalakiModel.getCurrentPlayer());        
        this.repaint(); //para que los cambios visuales se hagan efectivos.
    }//GEN-LAST:event_comprarNivelActionPerformed

    private void descartarTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descartarTActionPerformed
        // TODO add your handling code here:
        ArrayList<Treasure> selVisible = getSelectedTreasures(visibleTreasures);
        this.napakalakiModel.discardVisibleTreasures(selVisible);
        
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);
        this.napakalakiModel.discardHiddenTreasures(selHidden);

        setPlayer(napakalakiModel.getCurrentPlayer());
        this.repaint(); //para que los cambios visuales se hagan efectivos.
    }//GEN-LAST:event_descartarTActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton comprarNivel;
    private GUI.CultistView cultistView1;
    private javax.swing.JLabel dead;
    private javax.swing.JButton descartarT;
    private javax.swing.JButton hacerVisible;
    private javax.swing.JPanel hiddenTreasures;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel nivel;
    private javax.swing.JLabel nivelCombate;
    private javax.swing.JLabel nombre;
    private javax.swing.JPanel visibleTreasures;
    // End of variables declaration//GEN-END:variables
}
